#!/usr/bin/env python
# Author: Yubo "Paul" Yang
# Email: yubo.paul.yang@gmail.com
#
# Script for printing out Jastrows from an optimization folder.
# `rebuild_wf opt.xml` generates folders jas*, one for each optimization loop
#  jas1/jas.xml contains the wavefunction from prefix.s001.opt.xml
#  jas1/J1.uu.dat contains the up-up electron Jastrow for example

def get_bb_node(doc,args): # get basis builder xml node for 'href' extraction
  # get location of wavefunction hdf5
  spo_tag = 'sposet_builder'
  if args.detset:
    spo_tag = 'determinantset'
  # end if
  spo_node = doc.find('.//'+spo_tag)
  if (spo_node is None):
    if (args.force):
      pass
    elif (spo_tag == 'sposet_builder'):
      raise RuntimeError('cannot find <sposet_builder>, try set --detset to look for <determinantset>; use -jas if you only care about the jastrows')
    elif (spo_tag == 'determinantset'):
      raise RuntimeError('cannot find <determinantset>, is %s a valid QMCPACK input file?\n use -f if you are sure; use -jas if you only care about the jastrows'%args.fname)
    # end if
  # end if
  # check that href exists
  href = spo_node.get('href')
  if (not os.path.isfile(href)) and (not args.jastrow_only) and (not args.force):
    raise RuntimeError('cannot find wavefunction file, use -jas to circumvent this issue (href="%s")'%href)
  return spo_node


def opt_wf_fname(fname, iopt):
  st = 's'+str(iopt).zfill(3)
  doc = xml.read(fname)
  proj_id = doc.find('project').get('id')
  floc = '%s.%s.opt.xml' % (proj_id, st)
  return floc

if __name__ == '__main__':
  import os
  import argparse
  from qharv.seed import xml

  parser = argparse.ArgumentParser()
  parser.add_argument('fname',type=str,help='QMCPACK optimization input xml, should contain <loop>')
  parser.add_argument('--jastrow_only','-jas',action='store_true',help='empty <wavefunction> except for the <jastrow> nodes; this will circumvent the problem of having to find the correct orbital file for a determinant if one does not care about <determinantset>. ')
  parser.add_argument('--iqmc',type=int,default=-1,help='select wavefunction from a specific optimization loop to rebuild')
  parser.add_argument('--qbin',type=str,default='qmcpack',help='location of QMCPACK executable, default is to use the one available in $PATH')
  parser.add_argument('--setup',action='store_true',help='setup only i.e. skip execution')
  parser.add_argument('--detset',action='store_true',help='look for href in <determinantset> instead of <sposet_builder> node, for old inputs')
  parser.add_argument('--force','-f',action='store_true',help='skip checks')
  args = parser.parse_args()

  doc  = xml.read(args.fname)
  # decide on which optimization steps to look at
  sid0 = int(doc.find('.//project').get('series'))
  nqmc = int( doc.find('loop').get('max') )
  nmax = sid0 + nqmc - 1 # max series id available
  qlist= range(nqmc) # look at all steps by default
  if args.iqmc != -1:  # user selected step
    if (args.iqmc > nmax):
      raise RuntimeError('requested optimization step %d is outside of [%d,%d]'%(args.iqmc,sid0,nmax))
    # end if
    qlist = [args.iqmc]
  # end if

  spo_node0 = get_bb_node(doc,args)
  if args.jastrow_only:
    spo_node0 = None

  # make dummy input files using optimized w.f. at each loop
  for iqmc in qlist:
    # folder for dummy run used to rebuild wavefunction
    jas_dir = 'jas%d'%iqmc

    # put optimized wavefunction at step 'iqmc' into input
    wf_fname = opt_wf_fname(args.fname,iqmc)
    opt_wf = xml.read(wf_fname).getroot().find('.//wavefunction')
    doc = xml.read(args.fname)
    old_wf = doc.find('.//wavefunction')
    xml.swap_node(old_wf, opt_wf)
    if args.jastrow_only:
      wf_node = doc.find('.//wavefunction')
      for node in wf_node:
        if node.tag != 'jastrow':
          wf_node.remove(node)
        # end if
      # end for
    # end if
      
    # fix href
    if spo_node0 is not None:
      # todo: verify the hdf5 file exists
      spo_node = doc.find('.//'+spo_node0.tag)
      spo_node.set('href',os.path.join('..',spo_node0.get('href')))
    # end if

    # remove <qmc> sections
    lnodes = doc.findall('loop')
    for lnode in lnodes:
      lnode.getparent().remove(qnode)
    qnodes = doc.findall('qmc')
    for qnode in qnodes:
      qnode.getparent().remove(qnode)

    # write new input if no folder exists
    if not os.path.isdir(jas_dir):
      os.mkdir(jas_dir)
      floc = os.path.join(jas_dir,'jas.xml')
      xml.write(floc,doc)
      if not (args.setup):
        cmd = 'cd %s;%s jas.xml >& out'%(jas_dir,args.qbin)
        print('entering %s and executing: %s' % (jas_dir,cmd))
        os.system(cmd)
      # end if
    # end if
  # end for

# end __main__
