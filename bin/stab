#!/usr/bin/env python
# Author: Yubo "Paul" Yang
# Email: yubo.paul.yang@gmail.com
#
# Scalar TABle (stab) analyzer
# `stab prefix.s000.scalar.dat -e 10 -c Kinetic` prints the mean and error of the 'Kinetic' column
#  arbitrary scalar file may be analyzed as long as it is in table format

if __name__ == '__main__':
  import argparse
  import numpy as np
  from qharv.reel import scalar_dat
  parser = argparse.ArgumentParser()
  parser.add_argument('fname',type=str,help='Scalar TABle (stab) file name')
  parser.add_argument('--nequil','-e',type=int,default=0
    ,help='number of equilibration blocks to throw out')
  parser.add_argument('--column','-c',type=str,default='LocalEnergy'
    ,help='name of column to analyze, to list all columns use the -l flag')
  parser.add_argument('--list','-l',action='store_true'
    ,help='list all columns available in the scalar file')
  args = parser.parse_args()

  df  = scalar_dat.parse(args.fname)
  if args.list:
    print(df.columns)
  if 'LocalEnergy' not in df.columns:
    args.column = df.columns[0]
  if args.column not in df.columns:
    raise RuntimeError('requested column "%s" not found\n available:%s'%(args.column,str(df.columns)))

  # calculate the mean and error of a single column of scalars
  ymean,yerr = scalar_dat.single_column(df,args.column,args.nequil)

  prt_format = "{name:14s} {mean:10.6f} +/- {error:8.8f}"
  output = prt_format.format(
    name = args.column,
    mean = ymean,
    error= yerr) 
  print(output)

# end __main__
